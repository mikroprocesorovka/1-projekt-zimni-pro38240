#include "stm8s.h"
#include "milis.h"
#include "tm1637.h"

void displej(void);
void uart_prijem(void);
void init_tim(void);
void tikani(void);
const uint8_t znakova_sada[11]={
		
// dot,g,f,e,d,c,b,a
0b00000000,//0
0b00111111,//1
0b00000110,//2
0b01011011,//3
0b01001111,//4
0b01100110,//5
0b01101101,//6
0b01111101,//7
0b00000111,//8
0b01111111,//9
0b01101111,//10
};
uint16_t last_time=0;
uint8_t pole[4]; z1=0; z2=0; z3=0; z4=0; minule=0; bomba=0;
uint8_t x; y; z; stop;
char znak;
//x - zobrazuje sekundy
//y - zobrazuje desítky sekund
//z - zobrazuje minuty
void main(void){
CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);//taktuje MCU na 16MHz
//přenosová rychlost uartu 11520b/s
UART1_Init(115200,UART1_WORDLENGTH_8D,UART1_STOPBITS_1,UART1_PARITY_NO,UART1_SYNCMODE_CLOCK_DISABLE,UART1_MODE_RX_ENABLE);
UART1_Cmd(ENABLE);
init_milis(); 
init_tim();
tm1637_gpioinit();
tm1637_brightness(3);
pole[0]=znakova_sada[0];//zhasne první segment na displeji
pole[1]=znakova_sada[9];//zapíše číslo 3 na druhý segment
pole[2]=znakova_sada[1];//zapíše číslo 0 na druhý segment
pole[3]=znakova_sada[1];//zapíše číslo 0 na druhý segment
tm1637_display(pole);//zápis na displej

while (1){
	if(GPIO_ReadInputPin(GPIOE, GPIO_PIN_4) != RESET && minule==1){minule=0;}
	if(GPIO_ReadInputPin(GPIOE, GPIO_PIN_4) == RESET && minule==0){
		minule=1;
		x=1;//sekundy 
		y=1;//desítky sekund
		z=8;//minuty
		stop=0;
		bomba=0;
		while (bomba==0){
			displej();
			uart_prijem();
			tikani();
			if(x==1 && y==1 && z==1){
				TIM2_Cmd(ENABLE);
				delay_ms(2000);
				TIM2_Cmd(DISABLE);
				bomba=1;
			}
			if(stop==1){
				TIM2_Cmd(DISABLE);
				delay_ms(100);
				TIM2_Cmd(ENABLE);
				delay_ms(100);
				TIM2_Cmd(DISABLE);
				delay_ms(100);
				TIM2_Cmd(ENABLE);
				delay_ms(100);
				TIM2_Cmd(DISABLE);
				bomba=1;
			}
		}
	}
}
}

void displej(void){//funkce na počítání času

	if(milis() - last_time >= 1000){
		last_time = milis();
		x--;
		if(x<1){x=10; y--;}
		if(y<1){y=6; z--;}
		pole[3]=znakova_sada[x];
		pole[2]=znakova_sada[y];
		pole[1]=znakova_sada[z];
		tm1637_display(pole);		
	}
	if(milis() - last_time >= 500){
		pole[1]=znakova_sada[z] | 0b1<<7;
		tm1637_display(pole);
	}
}

void uart_prijem(void){

	if(UART1_GetFlagStatus(UART1_FLAG_RXNE) != RESET){
		znak=UART1_ReceiveData8();
		if(znak=='q'){z1=1;}
		else if(znak=='r' && z1==1){z2=1;}
		else if(znak=='i' && z2==1){z3=1;}
		else if(znak=='j' && z3==1){z4=1;}
		else if(znak=='f' && z4==1){stop=1;}
		else{z1=0; z2=0; z3=0; z4=0;}
	}
}

void tikani(void){
static uint16_t last_time=0;
static uint8_t a=0;

	if(milis() - last_time >= 800 && a==0){
		last_time=milis();
		TIM2_Cmd(ENABLE);
		TIM2_SetAutoreload(600);
		a=1;
	}

	if(milis() - last_time >= 200 && a==1){
		last_time=milis();
		TIM2_Cmd(DISABLE);
		a=0;
	}
}

void init_tim(void){
GPIO_Init(GPIOD, GPIO_PIN_3, GPIO_MODE_OUT_PP_LOW_SLOW); 
TIM2_TimeBaseInit(TIM2_PRESCALER_16,600-1); 
TIM2_OC2Init(
	TIM2_OCMODE_TOGGLE,
	TIM2_OUTPUTSTATE_ENABLE,
	1,
	TIM2_OCPOLARITY_LOW
	);
TIM2_ARRPreloadConfig(ENABLE);
TIM2_Cmd(ENABLE);
}

// pod tímto komentářem nic neměňte 
#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval : None
  */
void assert_failed(u8* file, u32 line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
